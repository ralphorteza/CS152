
Factorial

(define (fact n)
	(if (= 0 n)
		1
		(* n (fact (- n 1)))))



Fibonacci 

(define (fib n)
	(if (<= n 2)
		1 				;; if n is greater or equal to 2, return 1
		( + (fib (- n 1 ))		;; adds the recusions
		    (fib (- n 2))))))


countdown

(define (countdown n )
	(if (= n 0)
		null
		(begin				;;begin is a predicate that will print the ouput
			(display n )
			(newline)
			(countdown (- n 1)))))


 Map 
(define (my-map fn lst)
	(if (null? lst)
		null
		(cons (fn (car lst))		;;unite the first item with next item and so on)
		(my-map fn (cdr lst))))))))

> (my-maps ads(list 2 -3 4))
=> (2 3 4)



Recursion "Shapes = fact
--


define (fact n )
	(if (= 0 n )
		1
		(* n (fact (n - 1)))))


this is what the compiler does to get the factorial  of 3
(fact 3)
(* 3 (* 2 (fact 1)))
(* 3 (* 2 (* 1 (fact 0))))
(* 3 (* 2 (* 1 1)))
(* 3 (* 2 1))
(* 3 2)
6			


Recusrion "shapes" -fib
---
(define (fib n))
(if (<= n 2)
	1
	(+ 1 (fib (- n 1))
	(fib (- n 2))))



(fib 5)
(+ (fib 4) (fib 3))
(+ (+ (fib 3) (fib 2)) (+ (fib 2) (fib 1)))
(+ (+ (+ (fib 2) (fib 1)) 1) (+ 1 1))
(+ (+ (+ 1 1 ) 1 ) 2)
(+ (+ 2 1) 2)
(+ 3 2)
5



*"shapes" my-map*
(define (my-map fn lst)
	(if (null? lst)
		null
		(cons (fn (car lst))		
		(my-map fn (cdr lst))))))))


(my-map abs (list 2 -3 4))
(cons (abs 2) (my-map abs (list -3 4)
(cons 2 (cons (abs -3) (my-map abs (list 4))))
(cons 2 (cons 3 (cons (abs 4) (my-map abs null)))
(cons 2 (cons 3 (cons 4 null)))
(cons 2 (cons 3 (list 4)))
(cons 2 (list 3 4))
(list 2 3 4)



why the shape? Tail call optimization
---
The prev stack frame is no longer needed, then throw it away

*iterative forms -fact*
(dfeine (fact-it n)
	(define (impl acc count)
	(if (= 0 count)			;;if count equals 0, get accumulator (acc)
		acc      
		(impl (* count acc) (- count 1 ))))
	(imple 1 n))

;; see how the shape goes up and down because of binding
(fact-it 3)
(impl 1 3)
(impl (* 3 1) (- 3 1))
(imple 3 2)
(impl (* 3 2) (- 2 1))
(impl 6 1)
(imp (* 1 6) (- 1 1))
(impl 6 0)
6



*fib iter*
(define (fib-it) n)
	(define (impl acc1 acc2 count)
		(if (= count 2)
		acc1
		(impl (+ acc1 acc2) acc1 (- count 1)))) ;;impl takes the current ans with the prev ans
	(impl 1 1 n))					;; then count goes down 1

(fib-it 5)
(imp (+ 1 1) 1 (- 5 1)
(impl 2 1 4)
(impl (+ 2 1) 2 (-4 1))
(impl 3 2 3)
(impl (+ 3 2) 3 (-3 1)
(impl 5 3 2)
5




iterarative form for map?
---
No, nut "tail call optimization modulo cons"