## Haskell


###### User Defined Types
da

###### Product Data Type
`data Car = Car {make:: String, Model:: String, year:: int}`
  `deriving Show`

This is known as an alegbraic


Recursion Data Type
takes three args
data type, then left and right tree

```
data Tree = EmptyTree
          | Node Int Tree Tree
        deriving Show
```

`>babytree = Node 5 EmptyTree EmptyTree`
`>:t babytree`

```
      10
    /    \
  5       empytree

```

##### User defined Types with Type Param

##### Type synonyms
uses data types to define a types
ex. a list of characters is a synonym for String

#####zip with
